/**
 * generated by Xtext 2.17.1
 */
package fr.n7.jEU.impl;

import fr.n7.jEU.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class JEUFactoryImpl extends EFactoryImpl implements JEUFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static JEUFactory init()
  {
    try
    {
      JEUFactory theJEUFactory = (JEUFactory)EPackage.Registry.INSTANCE.getEFactory(JEUPackage.eNS_URI);
      if (theJEUFactory != null)
      {
        return theJEUFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new JEUFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JEUFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case JEUPackage.JEU: return createJeu();
      case JEUPackage.JEU_ELEMENT: return createJeuElement();
      case JEUPackage.JOUEUR: return createJoueur();
      case JEUPackage.CHEMIN: return createChemin();
      case JEUPackage.ALLOCATEUR_CONNAISSANCE: return createAllocateurConnaissance();
      case JEUPackage.ALLOCATEUR_OBJET: return createAllocateurObjet();
      case JEUPackage.LIEU: return createLieu();
      case JEUPackage.CONNAISSANCE: return createConnaissance();
      case JEUPackage.OBJET: return createObjet();
      case JEUPackage.INTERACTION: return createInteraction();
      case JEUPackage.CONDITION: return createcondition();
      case JEUPackage.PERSONNE: return createPersonne();
      case JEUPackage.CHOIX: return createchoix();
      case JEUPackage.ACTION: return createaction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JEUPackage.COMPARATEUR:
        return createComparateurFromString(eDataType, initialValue);
      case JEUPackage.TYPEVISIBILITE:
        return createtypevisibiliteFromString(eDataType, initialValue);
      case JEUPackage.TYPE_LIEU:
        return createtypeLieuFromString(eDataType, initialValue);
      case JEUPackage.OUVERT_OUFERME:
        return createouvertOufermeFromString(eDataType, initialValue);
      case JEUPackage.TYPEACTIVITE:
        return createtypeactiviteFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case JEUPackage.COMPARATEUR:
        return convertComparateurToString(eDataType, instanceValue);
      case JEUPackage.TYPEVISIBILITE:
        return converttypevisibiliteToString(eDataType, instanceValue);
      case JEUPackage.TYPE_LIEU:
        return converttypeLieuToString(eDataType, instanceValue);
      case JEUPackage.OUVERT_OUFERME:
        return convertouvertOufermeToString(eDataType, instanceValue);
      case JEUPackage.TYPEACTIVITE:
        return converttypeactiviteToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Jeu createJeu()
  {
    JeuImpl jeu = new JeuImpl();
    return jeu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JeuElement createJeuElement()
  {
    JeuElementImpl jeuElement = new JeuElementImpl();
    return jeuElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Joueur createJoueur()
  {
    JoueurImpl joueur = new JoueurImpl();
    return joueur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Chemin createChemin()
  {
    CheminImpl chemin = new CheminImpl();
    return chemin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllocateurConnaissance createAllocateurConnaissance()
  {
    AllocateurConnaissanceImpl allocateurConnaissance = new AllocateurConnaissanceImpl();
    return allocateurConnaissance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AllocateurObjet createAllocateurObjet()
  {
    AllocateurObjetImpl allocateurObjet = new AllocateurObjetImpl();
    return allocateurObjet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu createLieu()
  {
    LieuImpl lieu = new LieuImpl();
    return lieu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connaissance createConnaissance()
  {
    ConnaissanceImpl connaissance = new ConnaissanceImpl();
    return connaissance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Objet createObjet()
  {
    ObjetImpl objet = new ObjetImpl();
    return objet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interaction createInteraction()
  {
    InteractionImpl interaction = new InteractionImpl();
    return interaction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public condition createcondition()
  {
    conditionImpl condition = new conditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Personne createPersonne()
  {
    PersonneImpl personne = new PersonneImpl();
    return personne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public choix createchoix()
  {
    choixImpl choix = new choixImpl();
    return choix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public action createaction()
  {
    actionImpl action = new actionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Comparateur createComparateurFromString(EDataType eDataType, String initialValue)
  {
    Comparateur result = Comparateur.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComparateurToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typevisibilite createtypevisibiliteFromString(EDataType eDataType, String initialValue)
  {
    typevisibilite result = typevisibilite.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String converttypevisibiliteToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typeLieu createtypeLieuFromString(EDataType eDataType, String initialValue)
  {
    typeLieu result = typeLieu.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String converttypeLieuToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ouvertOuferme createouvertOufermeFromString(EDataType eDataType, String initialValue)
  {
    ouvertOuferme result = ouvertOuferme.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertouvertOufermeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public typeactivite createtypeactiviteFromString(EDataType eDataType, String initialValue)
  {
    typeactivite result = typeactivite.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String converttypeactiviteToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JEUPackage getJEUPackage()
  {
    return (JEUPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static JEUPackage getPackage()
  {
    return JEUPackage.eINSTANCE;
  }

} //JEUFactoryImpl
