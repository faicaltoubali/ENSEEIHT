/**
 * generated by Xtext 2.17.1
 */
package fr.n7.jEU.impl;

import fr.n7.jEU.Interaction;
import fr.n7.jEU.JEUPackage;
import fr.n7.jEU.Personne;
import fr.n7.jEU.choix;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Interaction</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.jEU.impl.InteractionImpl#getPersonne <em>Personne</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.InteractionImpl#getQuestion <em>Question</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.InteractionImpl#getChoix <em>Choix</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.InteractionImpl#getChoixJoueur <em>Choix Joueur</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InteractionImpl extends MinimalEObjectImpl.Container implements Interaction
{
  /**
   * The cached value of the '{@link #getPersonne() <em>Personne</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPersonne()
   * @generated
   * @ordered
   */
  protected Personne personne;

  /**
   * The default value of the '{@link #getQuestion() <em>Question</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuestion()
   * @generated
   * @ordered
   */
  protected static final String QUESTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getQuestion() <em>Question</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQuestion()
   * @generated
   * @ordered
   */
  protected String question = QUESTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getChoix() <em>Choix</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoix()
   * @generated
   * @ordered
   */
  protected EList<choix> choix;

  /**
   * The cached value of the '{@link #getChoixJoueur() <em>Choix Joueur</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoixJoueur()
   * @generated
   * @ordered
   */
  protected EList<choix> choixJoueur;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InteractionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JEUPackage.Literals.INTERACTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Personne getPersonne()
  {
    if (personne != null && personne.eIsProxy())
    {
      InternalEObject oldPersonne = (InternalEObject)personne;
      personne = (Personne)eResolveProxy(oldPersonne);
      if (personne != oldPersonne)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JEUPackage.INTERACTION__PERSONNE, oldPersonne, personne));
      }
    }
    return personne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Personne basicGetPersonne()
  {
    return personne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPersonne(Personne newPersonne)
  {
    Personne oldPersonne = personne;
    personne = newPersonne;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.INTERACTION__PERSONNE, oldPersonne, personne));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getQuestion()
  {
    return question;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setQuestion(String newQuestion)
  {
    String oldQuestion = question;
    question = newQuestion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.INTERACTION__QUESTION, oldQuestion, question));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<choix> getChoix()
  {
    if (choix == null)
    {
      choix = new EObjectContainmentEList<choix>(choix.class, this, JEUPackage.INTERACTION__CHOIX);
    }
    return choix;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<choix> getChoixJoueur()
  {
    if (choixJoueur == null)
    {
      choixJoueur = new EObjectContainmentEList<choix>(choix.class, this, JEUPackage.INTERACTION__CHOIX_JOUEUR);
    }
    return choixJoueur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JEUPackage.INTERACTION__CHOIX:
        return ((InternalEList<?>)getChoix()).basicRemove(otherEnd, msgs);
      case JEUPackage.INTERACTION__CHOIX_JOUEUR:
        return ((InternalEList<?>)getChoixJoueur()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JEUPackage.INTERACTION__PERSONNE:
        if (resolve) return getPersonne();
        return basicGetPersonne();
      case JEUPackage.INTERACTION__QUESTION:
        return getQuestion();
      case JEUPackage.INTERACTION__CHOIX:
        return getChoix();
      case JEUPackage.INTERACTION__CHOIX_JOUEUR:
        return getChoixJoueur();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JEUPackage.INTERACTION__PERSONNE:
        setPersonne((Personne)newValue);
        return;
      case JEUPackage.INTERACTION__QUESTION:
        setQuestion((String)newValue);
        return;
      case JEUPackage.INTERACTION__CHOIX:
        getChoix().clear();
        getChoix().addAll((Collection<? extends choix>)newValue);
        return;
      case JEUPackage.INTERACTION__CHOIX_JOUEUR:
        getChoixJoueur().clear();
        getChoixJoueur().addAll((Collection<? extends choix>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JEUPackage.INTERACTION__PERSONNE:
        setPersonne((Personne)null);
        return;
      case JEUPackage.INTERACTION__QUESTION:
        setQuestion(QUESTION_EDEFAULT);
        return;
      case JEUPackage.INTERACTION__CHOIX:
        getChoix().clear();
        return;
      case JEUPackage.INTERACTION__CHOIX_JOUEUR:
        getChoixJoueur().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JEUPackage.INTERACTION__PERSONNE:
        return personne != null;
      case JEUPackage.INTERACTION__QUESTION:
        return QUESTION_EDEFAULT == null ? question != null : !QUESTION_EDEFAULT.equals(question);
      case JEUPackage.INTERACTION__CHOIX:
        return choix != null && !choix.isEmpty();
      case JEUPackage.INTERACTION__CHOIX_JOUEUR:
        return choixJoueur != null && !choixJoueur.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (question: ");
    result.append(question);
    result.append(')');
    return result.toString();
  }

} //InteractionImpl
