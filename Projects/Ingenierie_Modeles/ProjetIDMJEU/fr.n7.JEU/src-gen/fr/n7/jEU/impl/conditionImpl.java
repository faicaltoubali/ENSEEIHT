/**
 * generated by Xtext 2.17.1
 */
package fr.n7.jEU.impl;

import fr.n7.jEU.Comparateur;
import fr.n7.jEU.Connaissance;
import fr.n7.jEU.JEUPackage;
import fr.n7.jEU.Objet;
import fr.n7.jEU.condition;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.jEU.impl.conditionImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.conditionImpl#getObjet <em>Objet</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.conditionImpl#getComparaison <em>Comparaison</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.conditionImpl#getReference <em>Reference</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.conditionImpl#getConnaissance <em>Connaissance</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.conditionImpl#isPresente <em>Presente</em>}</li>
 * </ul>
 *
 * @generated
 */
public class conditionImpl extends MinimalEObjectImpl.Container implements condition
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getObjet() <em>Objet</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObjet()
   * @generated
   * @ordered
   */
  protected Objet objet;

  /**
   * The default value of the '{@link #getComparaison() <em>Comparaison</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparaison()
   * @generated
   * @ordered
   */
  protected static final Comparateur COMPARAISON_EDEFAULT = Comparateur.LE;

  /**
   * The cached value of the '{@link #getComparaison() <em>Comparaison</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComparaison()
   * @generated
   * @ordered
   */
  protected Comparateur comparaison = COMPARAISON_EDEFAULT;

  /**
   * The default value of the '{@link #getReference() <em>Reference</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected static final int REFERENCE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getReference() <em>Reference</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReference()
   * @generated
   * @ordered
   */
  protected int reference = REFERENCE_EDEFAULT;

  /**
   * The cached value of the '{@link #getConnaissance() <em>Connaissance</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConnaissance()
   * @generated
   * @ordered
   */
  protected Connaissance connaissance;

  /**
   * The default value of the '{@link #isPresente() <em>Presente</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPresente()
   * @generated
   * @ordered
   */
  protected static final boolean PRESENTE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isPresente() <em>Presente</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isPresente()
   * @generated
   * @ordered
   */
  protected boolean presente = PRESENTE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected conditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JEUPackage.Literals.CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CONDITION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Objet getObjet()
  {
    if (objet != null && objet.eIsProxy())
    {
      InternalEObject oldObjet = (InternalEObject)objet;
      objet = (Objet)eResolveProxy(oldObjet);
      if (objet != oldObjet)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JEUPackage.CONDITION__OBJET, oldObjet, objet));
      }
    }
    return objet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Objet basicGetObjet()
  {
    return objet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObjet(Objet newObjet)
  {
    Objet oldObjet = objet;
    objet = newObjet;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CONDITION__OBJET, oldObjet, objet));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparateur getComparaison()
  {
    return comparaison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setComparaison(Comparateur newComparaison)
  {
    Comparateur oldComparaison = comparaison;
    comparaison = newComparaison == null ? COMPARAISON_EDEFAULT : newComparaison;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CONDITION__COMPARAISON, oldComparaison, comparaison));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getReference()
  {
    return reference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReference(int newReference)
  {
    int oldReference = reference;
    reference = newReference;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CONDITION__REFERENCE, oldReference, reference));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connaissance getConnaissance()
  {
    if (connaissance != null && connaissance.eIsProxy())
    {
      InternalEObject oldConnaissance = (InternalEObject)connaissance;
      connaissance = (Connaissance)eResolveProxy(oldConnaissance);
      if (connaissance != oldConnaissance)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JEUPackage.CONDITION__CONNAISSANCE, oldConnaissance, connaissance));
      }
    }
    return connaissance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Connaissance basicGetConnaissance()
  {
    return connaissance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConnaissance(Connaissance newConnaissance)
  {
    Connaissance oldConnaissance = connaissance;
    connaissance = newConnaissance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CONDITION__CONNAISSANCE, oldConnaissance, connaissance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isPresente()
  {
    return presente;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPresente(boolean newPresente)
  {
    boolean oldPresente = presente;
    presente = newPresente;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CONDITION__PRESENTE, oldPresente, presente));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JEUPackage.CONDITION__NAME:
        return getName();
      case JEUPackage.CONDITION__OBJET:
        if (resolve) return getObjet();
        return basicGetObjet();
      case JEUPackage.CONDITION__COMPARAISON:
        return getComparaison();
      case JEUPackage.CONDITION__REFERENCE:
        return getReference();
      case JEUPackage.CONDITION__CONNAISSANCE:
        if (resolve) return getConnaissance();
        return basicGetConnaissance();
      case JEUPackage.CONDITION__PRESENTE:
        return isPresente();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JEUPackage.CONDITION__NAME:
        setName((String)newValue);
        return;
      case JEUPackage.CONDITION__OBJET:
        setObjet((Objet)newValue);
        return;
      case JEUPackage.CONDITION__COMPARAISON:
        setComparaison((Comparateur)newValue);
        return;
      case JEUPackage.CONDITION__REFERENCE:
        setReference((Integer)newValue);
        return;
      case JEUPackage.CONDITION__CONNAISSANCE:
        setConnaissance((Connaissance)newValue);
        return;
      case JEUPackage.CONDITION__PRESENTE:
        setPresente((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JEUPackage.CONDITION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case JEUPackage.CONDITION__OBJET:
        setObjet((Objet)null);
        return;
      case JEUPackage.CONDITION__COMPARAISON:
        setComparaison(COMPARAISON_EDEFAULT);
        return;
      case JEUPackage.CONDITION__REFERENCE:
        setReference(REFERENCE_EDEFAULT);
        return;
      case JEUPackage.CONDITION__CONNAISSANCE:
        setConnaissance((Connaissance)null);
        return;
      case JEUPackage.CONDITION__PRESENTE:
        setPresente(PRESENTE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JEUPackage.CONDITION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case JEUPackage.CONDITION__OBJET:
        return objet != null;
      case JEUPackage.CONDITION__COMPARAISON:
        return comparaison != COMPARAISON_EDEFAULT;
      case JEUPackage.CONDITION__REFERENCE:
        return reference != REFERENCE_EDEFAULT;
      case JEUPackage.CONDITION__CONNAISSANCE:
        return connaissance != null;
      case JEUPackage.CONDITION__PRESENTE:
        return presente != PRESENTE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", comparaison: ");
    result.append(comparaison);
    result.append(", reference: ");
    result.append(reference);
    result.append(", presente: ");
    result.append(presente);
    result.append(')');
    return result.toString();
  }

} //conditionImpl
