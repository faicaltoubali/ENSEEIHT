/**
 * generated by Xtext 2.17.1
 */
package fr.n7.jEU.impl;

import fr.n7.jEU.AllocateurConnaissance;
import fr.n7.jEU.AllocateurObjet;
import fr.n7.jEU.Chemin;
import fr.n7.jEU.JEUPackage;
import fr.n7.jEU.Lieu;
import fr.n7.jEU.condition;
import fr.n7.jEU.ouvertOuferme;
import fr.n7.jEU.typevisibilite;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Chemin</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.jEU.impl.CheminImpl#getSource <em>Source</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.CheminImpl#getDestination <em>Destination</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.CheminImpl#getOuvertOUferme <em>Ouvert OUferme</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.CheminImpl#getVisibilite <em>Visibilite</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.CheminImpl#getAcces <em>Acces</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.CheminImpl#getVisible <em>Visible</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.CheminImpl#getAllocateursConnaissance <em>Allocateurs Connaissance</em>}</li>
 *   <li>{@link fr.n7.jEU.impl.CheminImpl#getAllocateursObjetLieu <em>Allocateurs Objet Lieu</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheminImpl extends JeuElementImpl implements Chemin
{
  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected Lieu source;

  /**
   * The cached value of the '{@link #getDestination() <em>Destination</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDestination()
   * @generated
   * @ordered
   */
  protected Lieu destination;

  /**
   * The default value of the '{@link #getOuvertOUferme() <em>Ouvert OUferme</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOuvertOUferme()
   * @generated
   * @ordered
   */
  protected static final ouvertOuferme OUVERT_OUFERME_EDEFAULT = ouvertOuferme.OUVERT;

  /**
   * The cached value of the '{@link #getOuvertOUferme() <em>Ouvert OUferme</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOuvertOUferme()
   * @generated
   * @ordered
   */
  protected ouvertOuferme ouvertOUferme = OUVERT_OUFERME_EDEFAULT;

  /**
   * The default value of the '{@link #getVisibilite() <em>Visibilite</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibilite()
   * @generated
   * @ordered
   */
  protected static final typevisibilite VISIBILITE_EDEFAULT = typevisibilite.VISIBLE;

  /**
   * The cached value of the '{@link #getVisibilite() <em>Visibilite</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibilite()
   * @generated
   * @ordered
   */
  protected typevisibilite visibilite = VISIBILITE_EDEFAULT;

  /**
   * The cached value of the '{@link #getAcces() <em>Acces</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAcces()
   * @generated
   * @ordered
   */
  protected condition acces;

  /**
   * The cached value of the '{@link #getVisible() <em>Visible</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisible()
   * @generated
   * @ordered
   */
  protected condition visible;

  /**
   * The cached value of the '{@link #getAllocateursConnaissance() <em>Allocateurs Connaissance</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllocateursConnaissance()
   * @generated
   * @ordered
   */
  protected EList<AllocateurConnaissance> allocateursConnaissance;

  /**
   * The cached value of the '{@link #getAllocateursObjetLieu() <em>Allocateurs Objet Lieu</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAllocateursObjetLieu()
   * @generated
   * @ordered
   */
  protected EList<AllocateurObjet> allocateursObjetLieu;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheminImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return JEUPackage.Literals.CHEMIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu getSource()
  {
    if (source != null && source.eIsProxy())
    {
      InternalEObject oldSource = (InternalEObject)source;
      source = (Lieu)eResolveProxy(oldSource);
      if (source != oldSource)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JEUPackage.CHEMIN__SOURCE, oldSource, source));
      }
    }
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lieu basicGetSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSource(Lieu newSource)
  {
    Lieu oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CHEMIN__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu getDestination()
  {
    if (destination != null && destination.eIsProxy())
    {
      InternalEObject oldDestination = (InternalEObject)destination;
      destination = (Lieu)eResolveProxy(oldDestination);
      if (destination != oldDestination)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, JEUPackage.CHEMIN__DESTINATION, oldDestination, destination));
      }
    }
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lieu basicGetDestination()
  {
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDestination(Lieu newDestination)
  {
    Lieu oldDestination = destination;
    destination = newDestination;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CHEMIN__DESTINATION, oldDestination, destination));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ouvertOuferme getOuvertOUferme()
  {
    return ouvertOUferme;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOuvertOUferme(ouvertOuferme newOuvertOUferme)
  {
    ouvertOuferme oldOuvertOUferme = ouvertOUferme;
    ouvertOUferme = newOuvertOUferme == null ? OUVERT_OUFERME_EDEFAULT : newOuvertOUferme;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CHEMIN__OUVERT_OUFERME, oldOuvertOUferme, ouvertOUferme));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public typevisibilite getVisibilite()
  {
    return visibilite;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisibilite(typevisibilite newVisibilite)
  {
    typevisibilite oldVisibilite = visibilite;
    visibilite = newVisibilite == null ? VISIBILITE_EDEFAULT : newVisibilite;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CHEMIN__VISIBILITE, oldVisibilite, visibilite));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public condition getAcces()
  {
    return acces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAcces(condition newAcces, NotificationChain msgs)
  {
    condition oldAcces = acces;
    acces = newAcces;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JEUPackage.CHEMIN__ACCES, oldAcces, newAcces);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAcces(condition newAcces)
  {
    if (newAcces != acces)
    {
      NotificationChain msgs = null;
      if (acces != null)
        msgs = ((InternalEObject)acces).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JEUPackage.CHEMIN__ACCES, null, msgs);
      if (newAcces != null)
        msgs = ((InternalEObject)newAcces).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JEUPackage.CHEMIN__ACCES, null, msgs);
      msgs = basicSetAcces(newAcces, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CHEMIN__ACCES, newAcces, newAcces));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public condition getVisible()
  {
    return visible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVisible(condition newVisible, NotificationChain msgs)
  {
    condition oldVisible = visible;
    visible = newVisible;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, JEUPackage.CHEMIN__VISIBLE, oldVisible, newVisible);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisible(condition newVisible)
  {
    if (newVisible != visible)
    {
      NotificationChain msgs = null;
      if (visible != null)
        msgs = ((InternalEObject)visible).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - JEUPackage.CHEMIN__VISIBLE, null, msgs);
      if (newVisible != null)
        msgs = ((InternalEObject)newVisible).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - JEUPackage.CHEMIN__VISIBLE, null, msgs);
      msgs = basicSetVisible(newVisible, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, JEUPackage.CHEMIN__VISIBLE, newVisible, newVisible));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AllocateurConnaissance> getAllocateursConnaissance()
  {
    if (allocateursConnaissance == null)
    {
      allocateursConnaissance = new EObjectContainmentEList<AllocateurConnaissance>(AllocateurConnaissance.class, this, JEUPackage.CHEMIN__ALLOCATEURS_CONNAISSANCE);
    }
    return allocateursConnaissance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<AllocateurObjet> getAllocateursObjetLieu()
  {
    if (allocateursObjetLieu == null)
    {
      allocateursObjetLieu = new EObjectContainmentEList<AllocateurObjet>(AllocateurObjet.class, this, JEUPackage.CHEMIN__ALLOCATEURS_OBJET_LIEU);
    }
    return allocateursObjetLieu;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case JEUPackage.CHEMIN__ACCES:
        return basicSetAcces(null, msgs);
      case JEUPackage.CHEMIN__VISIBLE:
        return basicSetVisible(null, msgs);
      case JEUPackage.CHEMIN__ALLOCATEURS_CONNAISSANCE:
        return ((InternalEList<?>)getAllocateursConnaissance()).basicRemove(otherEnd, msgs);
      case JEUPackage.CHEMIN__ALLOCATEURS_OBJET_LIEU:
        return ((InternalEList<?>)getAllocateursObjetLieu()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case JEUPackage.CHEMIN__SOURCE:
        if (resolve) return getSource();
        return basicGetSource();
      case JEUPackage.CHEMIN__DESTINATION:
        if (resolve) return getDestination();
        return basicGetDestination();
      case JEUPackage.CHEMIN__OUVERT_OUFERME:
        return getOuvertOUferme();
      case JEUPackage.CHEMIN__VISIBILITE:
        return getVisibilite();
      case JEUPackage.CHEMIN__ACCES:
        return getAcces();
      case JEUPackage.CHEMIN__VISIBLE:
        return getVisible();
      case JEUPackage.CHEMIN__ALLOCATEURS_CONNAISSANCE:
        return getAllocateursConnaissance();
      case JEUPackage.CHEMIN__ALLOCATEURS_OBJET_LIEU:
        return getAllocateursObjetLieu();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case JEUPackage.CHEMIN__SOURCE:
        setSource((Lieu)newValue);
        return;
      case JEUPackage.CHEMIN__DESTINATION:
        setDestination((Lieu)newValue);
        return;
      case JEUPackage.CHEMIN__OUVERT_OUFERME:
        setOuvertOUferme((ouvertOuferme)newValue);
        return;
      case JEUPackage.CHEMIN__VISIBILITE:
        setVisibilite((typevisibilite)newValue);
        return;
      case JEUPackage.CHEMIN__ACCES:
        setAcces((condition)newValue);
        return;
      case JEUPackage.CHEMIN__VISIBLE:
        setVisible((condition)newValue);
        return;
      case JEUPackage.CHEMIN__ALLOCATEURS_CONNAISSANCE:
        getAllocateursConnaissance().clear();
        getAllocateursConnaissance().addAll((Collection<? extends AllocateurConnaissance>)newValue);
        return;
      case JEUPackage.CHEMIN__ALLOCATEURS_OBJET_LIEU:
        getAllocateursObjetLieu().clear();
        getAllocateursObjetLieu().addAll((Collection<? extends AllocateurObjet>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case JEUPackage.CHEMIN__SOURCE:
        setSource((Lieu)null);
        return;
      case JEUPackage.CHEMIN__DESTINATION:
        setDestination((Lieu)null);
        return;
      case JEUPackage.CHEMIN__OUVERT_OUFERME:
        setOuvertOUferme(OUVERT_OUFERME_EDEFAULT);
        return;
      case JEUPackage.CHEMIN__VISIBILITE:
        setVisibilite(VISIBILITE_EDEFAULT);
        return;
      case JEUPackage.CHEMIN__ACCES:
        setAcces((condition)null);
        return;
      case JEUPackage.CHEMIN__VISIBLE:
        setVisible((condition)null);
        return;
      case JEUPackage.CHEMIN__ALLOCATEURS_CONNAISSANCE:
        getAllocateursConnaissance().clear();
        return;
      case JEUPackage.CHEMIN__ALLOCATEURS_OBJET_LIEU:
        getAllocateursObjetLieu().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case JEUPackage.CHEMIN__SOURCE:
        return source != null;
      case JEUPackage.CHEMIN__DESTINATION:
        return destination != null;
      case JEUPackage.CHEMIN__OUVERT_OUFERME:
        return ouvertOUferme != OUVERT_OUFERME_EDEFAULT;
      case JEUPackage.CHEMIN__VISIBILITE:
        return visibilite != VISIBILITE_EDEFAULT;
      case JEUPackage.CHEMIN__ACCES:
        return acces != null;
      case JEUPackage.CHEMIN__VISIBLE:
        return visible != null;
      case JEUPackage.CHEMIN__ALLOCATEURS_CONNAISSANCE:
        return allocateursConnaissance != null && !allocateursConnaissance.isEmpty();
      case JEUPackage.CHEMIN__ALLOCATEURS_OBJET_LIEU:
        return allocateursObjetLieu != null && !allocateursObjetLieu.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (ouvertOUferme: ");
    result.append(ouvertOUferme);
    result.append(", visibilite: ");
    result.append(visibilite);
    result.append(')');
    return result.toString();
  }

} //CheminImpl
